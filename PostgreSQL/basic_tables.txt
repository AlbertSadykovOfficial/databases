
	Основные операции с таблицами

		1) Открываем нашу БД
				psql -d demo -U postgres

		<Стрелка вверх> - предыдущие команды из буфера истории
		<Ctrl>+<C> - отмена ввода команды
		\d <имя_таблицы> - проверить таблицу
		\g - замена для (;)
		\e - вызвать внешний редактор для редактирования текущего запросв
		\s - сохранить всю истоию выполненных команд в файле:
					\s <имя файла>


		Удалить таблицу: 
				DROP TABLE <ИМЯ ТАБЛИЦЫ>

		Создать таблицу:
				Справка:
						\h CREATE TABLE

				Подсчет кол-ва строк:
						SELECT count( * ) FROM seats WHERE aircraft_code = 'SU9';
						SELECT aircraft_code, count( * ) FROM seats GROUP BY aircraft_code;
						SELECT aircraft_code, count( * ) FROM seats GROUP BY aircraft_code ORDER BY count;

				Запрос:

						CREATE TABLE имя-таблицы
						(
								имя-поля тип-данных [ограничения-целостности],
								имя-поля тип-данных [ограничения-целостности],
									...
								имя-поля тип-данных [ограничения-целостности],
								[ограничения-целостности],
								[первыичный ключ],
								[внешний-ключ]
						);

				Пример:
						CREATE TABLE aircrafts
						(
								aircraft_code char( 3 ) NOT NULL,
								model text NOT NULL,
								range integer NOT NULL,
								CHECK ( range > 0 ),
								PRIMARY KEY ( aircraft_code )
						);

						#  REFERENCES - ссылаеммся-привязываемся на столбец таблицы
						#	 ON DELETE CASCADE - Каскадное удаление 
						#  (при удалении строки в таблице aircrafts)
						#
						#  Так как эта табица ссыается на другую,
						#  То при добавлениии в не через команду INSERT
						#  будет возбуждена ошибка, 
						#  если указываемого самолета нет в таблице aircraft
						CREATE TABLE aircrafts
						(
								aircraft_code 	char( 3 ) 		NOT NULL,
								seat_no 				varchar( 4 ) 	NOT NULL,
								fare_conditions varchar( 10 )	NOT NULL,
								CHECK (
								 	fare_conditions IN ('Economy', 'Comfort', 'Business')
								 ),
								PRIMARY KEY ( aircraft_code ),
								FOREIGN KEY ( aircraft_code)
									REFERENCES aircrefts ( aircraft_code )
									ON DELETE CASCADE  									
						);

			
			Ввод данных в таблицу:

					INSERT INTO <имя_таблицы> [(имя атрибута, имя атрибута, ...)]
															VALUES (значение атрибута, значение атрибута);

					Пример:
							INSERT INTO <имя_таблицы> (aircraft_code, model, range)]
																VALUES ( 'SU9', 'Suchoi SuperJet-100', 3000 );

							Ответ:
									INSERT 0 1 (0 - внутренний ответ Postgre, 1 - кол-во добавленных строк)


			Выборка данных

					SELECT <имя атрибута>, <имя атрибута>, ...
						FROM <имя_таблицы>;

					Пример:
							SELECT * FROM aircrafts;

							SELECT model, aircraft_code, range
								FROM aircrafts
								ORDER BY model;

							SELECT model, aircraft_code, range
								FROM aircrafts
								WHERE range >= 4000 AND range <= 6000;

							# Подсчитать кол-во мест в салонах для всех моделей самолетов с учетом класса обслуживания
							SELECT aircraft_code, fare_conditions, count( * )
								FROM seats
								GROUP BY aircraft_code, fare_conditions
								ORDER BY aircraft_code, fare_conditions;

			
			Обновление значений:

					UPDATE <имя_таблицы>
						SET <имя атрибута1> = ЗНАЧЕНИЕ1, 
								<имя атрибута2> = ЗНАЧЕНИЕ2, 
								...
						WHERE <условие>;

					Пример:
							UPDATE aircrafts SET range = 3500
								WHERE aircraft_code = 'SU9';

			Удаление значений:

					DELETE FROM <имя_таблицы> условие;

					Пример:

							DELETE FROM aircrafts;
							DELETE FROM aircrafts WHERE aircraft_code = 'CN1';
							DELETE FROM aircrafts WHERE range > 10000 OR range < 3000;

