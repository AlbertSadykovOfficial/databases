<?php 
	/*
	Создаем нового пользователя БД с именем root БЕЗ пароля
		Z:\usr\local\mysql-5.7\bin\mysql -u root 
	// На удаленном сервере  username - раеально имя пользователя, и если есть пароль - пароль после -p
														mysql -u username -p 
	Информация о БД
	SHOW databases;

	Команды не чувсвительны к регистру, но принто писать их большими буквами

__Приглашение MySQL_________Значение_____________________________________________________________________
	mysql>						 Готова к работе и ждет ввода команды 
			-> 						 Ожидание следующей строки команды 
			'> 						 Ожидание следующей строки строкового значения, которое начиналось с одинарной кавычки 
			"> 						 Ожидание следующей строки строкового значения, которое начиналось с двойной кавычки 
			`> 						 Ожидание следующей строки строкового значения, которое начиналось с символа засечки (`) 
			/*> 					 Ожидание следующей строки комментария, который начинался с символов /*
_________________________________________________________________________________________________________

для отмена недоконца введенной команды используется (\c) 
(НО если есть открытая строка или комментарий, надо закрыть, иначе не сработает)
Так же ее нужно поставить до точик с запятой
ПРИМЕР: это "бессмысленная для mysql строка" \c

Наиболее используемые команды:

ALTER 						Внесение изменений в базу данных или таблицу 
BACKUP 						Создание резервной копии таблицы 
\c 								Отмена ввода 
CREATE 						Создание базы данных 
DELETE 						Удаление строки из таблицы 
DESCRIBE 					Описание столбцов таблиц 
DROP 							Удаление базы данных или таблицы 
EXIT (Ctrl+C) 		Выход 
GRANT 						Изменение привилегий пользователя 
HELP (\h, \?) 		Отображение подсказки 
INSERT 						Вставка данных 
LOCK 							Блокировка таблицы (таблиц) 
QUIT (\q) 				То же самое, что и EXIT 
RENAME 						Переименование таблицы 
SHOW 							Список сведений об объектах 
SOURCE 						Выполнение команд из файла 
STATUS (\s) 			Отображение текущего состояния 
TRUNCATE 					Опустошение таблицы 
UNLOCK 						Снятие блокировки таблицы (таблиц) 
UPDATE 						Обновление существующей записи 
USE 							Использование базы данных


Создадим новую БД
	CREATE DATABASE publications; 
Для работы с ней - захватим ее
	USE publications; 
	
Команда GRANT
Параметр 										Значение 
	*.* 									Все базы данных и все их объекты 
база_данных.* 					Только база данных с именем база_данных и все ее объекты 
база_данных.объект 			Только база данных с именем база_данных и ее объект с именем объект
___________________________________________________________________________________________________
	Предоставить все права пользователю albert с паролем pass к БД publication
GRANT ALL ON publications.* TO 'albert'@'localhost' IDENTIFIED BY 'pass';
___________________________________________________________________________________________________
Создаем таблицу
(ENGINE MyISAM;) - ТИП механизма управления БД
CREATE TABLE classics (
    -> author VARCHAR(128),
    -> title VARCHAR(128),
    -> type VARCHAR(16),
    -> year CHAR(4)) ENGINE MyISAM;   //  есть специальный тип YEAR, НО ОН  1 БАЙТ и хранит 256 знач от 1901 до 2155, 
  																		// Наша таблица будет содержать данные о годе меньше 1900, поэтому исп char 4 БАЙТА

VARCHAR->
				 VARiable length CHARacter string — строка символов переменной длины, а команда воспри— строка символов переменной длины, а команда воспринимает числовое значение, указывающее MySQL максимальную длину, разрешенMySQL максимальную длину, разрешен максимальную длину, разрешенную для строки, хранящейся в этом поле. 
Если значение превысит указанное, то оно обрежется

CHAR vs VARCHAR 
 При недозаполнении char дополнится пррбелами, VARCHAR - НЕТ
 CHAR быстрее, так как нединамический, 
 CHAR лучше исп для тех случаях данные имею одинаковый размер
____________________________________________________________________________________________________
// Сведения о таблице
DESCRIBE classics;
Field  |	Type   | Null | Key | Default | Extra

Field — имя каждого из полей или столбцов таблицы; 
 Type — тип данных, сохраняемых в поле;  
 Null — заголовок, который показывает, может ли поле содержать значение NULL;  
 Key — MySQL поддерживает ключи, или индексы, позволяющие ускорить просмотр и поиск данных. Под заголовком Key показан тип применяемого ключа (если таковой имеется);  
 Default — исходное значение, присваиваемое полю, если при создании новой строки не указано никакого значения;  
 Extra — дополнительная информация, например, о настройке поля на автома— дополнительная информация, например, о настройке поля на автоматическое приращение его значения.
______________________________________________________________________________________________________

// Создание/Удаление таблицы
CREATE TABLE disposable(trash INT); 
DROP TABLE disposable; 


// Добавленеие данных к таблице
INSERT INTO classics(author, title, type, year)
VALUES('Mark Twain','The Adventures of Tom Sawyer','Fiction','1876');
	
//Сведения о таблице
SELECT * FROM classics;

// Переименвка таблицы
ALTER TABLE classics RENAME pre1900;

//Изменене типа данных значения year таблицы
ALTER TABLE classics MODIFY year SMALLINT;

// Добавление нового столбца
ALTER TABLE classics ADD pages SMALLINT UNSIGNED;
// Удаление
ALTER TABLE classics DROP pages; 

 
// Изменение имени строки  [Field[category]]
ALTER TABLE classics CHANGE type category VARCHAR(16);
-->Cлово CHANGE требует указания типа данных даже в том случае, если вы не собираетесь его изменять, и VARCHAR(16) — тот самый тип данных, который был указан при создании столбца type.
__________________________________________________________________________________________________________________________________

// Индексация

// Добавление индекса к столбцу автор (с ограничением индекса на 20 символов)
																			// The Adventures of Tom Sawyer 
																			// первые 20 символов: The Adventures of To 
ALTER TABLE classics ADD INDEX(author(20)); 
ALTER TABLE classics ADD INDEX(category(4));
или
CREATE INDEX author ON classics (author(20)); // Но эта команда НЕ выдает
																							// PRIMARY KEY

Что касается categor : чтобы идентифицировать уникальность строки, 
достаточно только первого символа (F для Fiction, N для Non-Fiction и P для Play), 
но выбран индекс из (4) символов, чтобы можно было вводить категории из 4х символов

MUL - МНОГОКРАТНО могут встречаться значения (имена авторов 1автор = много книг)
	
Создание таблицы сразу с индеками
CREATE TABLE classics (  
	author VARCHAR(128),  
	title VARCHAR(128),  
	category VARCHAR(16),  
	year SMALLINT,  
	INDEX(author(20)),  
	INDEX(title(20)),  
	INDEX(category(4)),  
	INDEX(year)) ENGINE MyISAM;

// Первыичный ключ 
// Номер ISBN состоит из 13 символов, 

// ЭТА КОМАНДА НЕ СРАБОТАЕТ,
	ALTER TABLE classics ADD isbn CHAR(13) PRIMARY KEY;
 Будет получено сообщение об ошибке, связанной с дубликатом записи для ключа 1: Duplicate entry. Причина в том, что таблица уже заполнена данными, а эта команда пытается добавить столбец со значением NULL к каждой строке, что запрещено, поскольку все столбцы, использующие первичный ключ, должны иметь уникальное значение. Но если бы таблица была пуста, то эта команда была бы выполнена без проблем, как и при добавлении первичного ключа сразу же после создания таблицы.

Принцип обхода:
Создать новый столбец без индекса, 
	ALTER TABLE classics ADD isbn CHAR(13)
Заполнить его данными, а затем добавить индекс ретроспективно, воспользоваться командой 
	UPDATE classics SET isbn='9781598184891' WHERE year='1876'; 	
В этом наборе данных каждый год имеет уникальное значение, 
поэтому для идентификации каждой обновляемой строки можно воспользоваться столбцом year. 
	
--> При создании новой таблицы, нжно дополнить значением(вутри скобок)
PRIMARY KEY (isbn)

// FULLTEXT
	1)С версии MySQL 5.6 FULLTEXT работает с таблицами InnoDB, но прежде эти индексы могли применяться только с таблицами типа MyISAM
	Привести таблицу к типу ISAM :
		ALTER TABLE tablename ENGINE = MyISAM;
	2)Индексы FULLTEXT могут создаваться только для столбцов с типами данных CHAR, VARCHAR и TEXT.  
	3)Определение индекса FULLTEXT может быть дано в инструкции CREATE TABLE при создании таблицы 
	или добавлено позже с использованием инструкции ALTER TABLE (или CREATE INDEX). 
	4) НАМНОГО быстрее будет загрузить большие наборы данных в таблицу, не имеющую индекса FULLTEXT, 
		а затем создать индекс, чем загружать их в таблицу, у которой уже имеется индекс FULLTEXT.
	
	Добавление Индека
	ALTER TABLE classics ADD FULLTEXT(author,title); 

	Такая возможность могла бы проявиться в полную силу, если бы вы могли теперь ввести весь текст этих книг в базу данных 

Если система MySQL станет при доступе к вашей базе данных работать медленнее, чем вы от нее ожидали, то проблема чаще всего заключается в ваших индексах. Либо у вас нет индекса там, где он нужен, либо индексы составлены неоптимальным образом. Зачастую данная проблема решается за счет тонкой настройки индексов таблиц
	*/

 ?>