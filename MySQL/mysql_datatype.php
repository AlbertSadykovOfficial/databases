<?php 
		/*
				Типы данных
Тип данны CHAR

		Тип данных____|____Количество байтов________|__Примеры__________________________
			CHAR(n)			| В точности равное n(<= 256) |	CHAR(5) Hello использует 5 байт 
		______________|_____________________________|	CHAR(57) Goodbye использует 57 байт 
		 VARCHAR(n) 	|	Вплоть до n (<= 65 536) 		|	VARCHAR(7) Morning использует 7 байт 
		______________|_____________________________|_VARCHAR(100) Night использует 5 байт


Тип данных BINARY
	
	Тип данных____|____Количество байтов________|__Примеры__________________________
	BINARY(n)	  	| В точности равное n(<= 256) |	Как CHAR
	BYTE(n)_______|_____________________________|	НО для 2-чных данных
	VARBINARY(n) 	|	Вплоть до n (<= 65 536) 		|	Как VARCHAR 
	______________|_____________________________|_НО для 2-чных данных
		

Типы данных TEXT

	Тип данных____|____Количество байтов________|__Примеры______________________
	TINYTEXT(n)	  |   Вплоть до n (<= 256)      |
	TEXT( n )		 	|   Вплоть до n (<= 65 536)   |		Cчитается строкой с набором 
	MEDIUMTEXT(n) |		Вплоть до n (<= 1,67e+7)  |							символов
	LONGTEXT(n)   |	  Вплоть до n (<= 4,29e+9)	|
	______________|_____________________________|_______________________________	


Типы данных BLOB 

Термин BLOB означает Binary Large Object — большой двоичный объект (для 2-чных данных > 65 536 Байт)
	Тип данных____|____Количество байтов________|__Примеры______________________
	TINYBLOB(n)	  |   Вплоть до n (<= 256)      |
	BLOB( n )		 	|   Вплоть до n (<= 65 536)   |	Cчитается не набором символов, 
	MEDIUMBLOB(n) |		Вплоть до n (<= 1,67e+7)  |	а ДВОИЧНЫМИ данными
	LONGBLOB(n)   |	  Вплоть до n (<= 4,29e+9)	|
________________|_____________________________|_______________________________
	

Числовой тип данных 

Тип данных Количество байтов 	Минимальное значение 	Максимальное значение 
															Со знаком 	Без знака  Со знаком 	Без знака 
TINYINT 					1 						–128 					0 				127 				255 
SMALLINT 					2 					–32 768 				0 			32 767 			65 535 
MEDIUMINT 				3 					–8,38e+6 				0 			8,38e+6 		1,67e+7 
INT или INTEGER 	4 					−2,15e+9 				0 			2,15e+9 		4,29e+9 
BIGINT 						8 					−9,22e+18 			0 			9,22e+18 		1,84e+19 
FLOAT 						4 					−3,40e+38 	Не бывает 	3,40e+38 		Не бывает 
DOUBLE или REAL 	8 				 −1,80e+308 	Не бывает 	1,80e+308 	Не бывает


Чтобы содать переменную без знака UNSIGNED
Создаем аблицу tablename  с полем fieldname
CREATE TABLE tablename (fieldname INT UNSIGNED); 	
CREATE TABLE tablename (fieldname INT(4)); // 4 - Отображаемое число данных
CREATE TABLE tablename (fieldname INT(4) ZEROFILL); ZEROFILL - ДОЗАПОЛНИТ значение так, что доавятся 0, чтобы число данных было равно 4	


Типы данных DATE и TIME

Тип данных 	|		Формат времени-даты 
DATETIME 		|	 '0000-00-00 00:00:00' 
DATE 				|			 '0000-00-00' 
TIMESTAMP 	|	 '0000-00-00 00:00:00'    	КАК  DATETIME, НО (от 1970 до 2037 года) 
TIME 				|				'00:00:00' 
YEAR 				|					 0000 								(только годы 0000 и 1901–2155)

 TIMESTAMP также полезен, потому что, используя его, можно позволить MySQL установить для вас нужное значение. Если при добавлении строки не задавать значение для поля с этим типом данных, то в него автоматически будет вставлено текущее время. Можно также заставить MySQL обновлять столбец с типом данных TIMESTAMP при каждом изменении строки. 

------------------------------------------------------------------------------------------------------------------------------------
Тип данных AUTO_INCREMENT

В соответствии с названием столбца, которому назначен этот тип данных, его содержимому будет устанавливаться значение на единицу большее, чем значение записи в этом же столбце в предыдущей вставленной строке. 
Добавление столбца id с автоприращением: 

ALTER TABLE classics ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT KEY;
ALTER TABLE classics DROP id; 																						// УДАЛИТЬ Добавленную строку 

Команда ALTER, очень похожая на команду CREATE. 
Команда ALTER работает с уже существующей таблицей и может добавлять, изменять или удалять столбцы.

Добавлям столбец по имени id, имеющий следующие характеристики:

		INT UNSIGNED — делает столбец способным принять целое число, достаточно большое для того, чтобы в таблице могло храниться более 4 млрд записей.  
		
		NOT NULL — обеспечивает наличие значения в каждой записи столбца. Многие программисты используют его в поле NULL, чтобы показать отсутствие в нем какого-либо значения. Но тогда могут появляться дубликаты, противоречащие самому смыслу существования этого столбца. Поэтому появление в нем значения NULL запрещено.  
		
		AUTO_INCREMENT — заставляет MySQL установить для этого столбца уникальное значение в каждой строке, как было описано ранее. Фактически мы не управляем значением, которое будет появляться в каждой строке этого столбца, но это и не нужно: все, о чем мы беспокоимся, — гарантия уникальности этого значения.  
		
		KEY — столбец с автоприращением полезно использовать в качестве ключа, поскольку вы будете стремиться искать строки на основе значений этого столбца.

*/


 ?>